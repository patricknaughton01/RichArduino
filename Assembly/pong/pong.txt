;Standards:
; r31 is used as the stack pointer and initially points to the top of the stack
; r30 is always the return address for a function.
; r0 will always be 0.
; The arguments to a function will be pushed to the stack in reverse order.
; r20-r29 (inclusive) are callee save registers, the rest are caller save.
; r19 stores the return value of the function
;
; Main stack frame looks like:
;   paddle len          <-- bottom of stack
;   paddle 1 x
;   paddle 1 y
;   paddle 2 x
;   paddle 2 y
;   paddle velocity
;   ball location x
;   ball location y
;   ball velocity x
;   ball velocity y
;   frame delay

        .org 4096
        la r0, 0
        la r31, 8191            ; top of sram
        addi r31, r31, -40      ; dec stack pointer
        la r1, 6                ; paddle len
        la r2, 12               ; paddle ys
        la r3, 1                ; paddle 1 x
        la r4, 78               ; paddle 2 x
        la r5, 1                ; paddle vel
        la r6, 40               ; ball loc x
        la r7, 15               ; ball loc y
        la r8, -1               ; ball vel x and y
        la r9, 1                ; frame delay TODO: (change this)
        shl r9, r9, 18          ; frame delay = 2^18
        st r1, 40(r31)
        st r3, 36(r31)
        st r2, 32(r31)
        st r4, 28(r31)
        st r2, 24(r31)
        st r5, 20(r31)
        st r6, 16(r31)
        st r7, 12(r31)
        st r8, 8(r31)
        st r8, 4(r31)
        st r9, (r31)
        la r20, 4294967274      ; d0
        st r0, 2(r20)           ; make d2 an input
        st r0, 3(r20)           ; make d3 an input
        st r0, 4(r20)           ; make d4 an input
        st r0, 5(r20)           ; make d5 an input
        
        la r20, CLRA_F          ; clear the screen before we start
        brl r30, r20
        
                                ; Data is stored on the stack
MAIN_L: la r20, CLR_F           ; Begin the main function
        ld r21, 36(r31)         ; p1x
        ld r22, 28(r31)         ; p2x
        ld r23, 16(r31)         ; ball x
        addi r31, r31, -12
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call clear(p1x, p2x, p3x)
        addi r31, r31, 12       ; restore main stack frame
        
        la r20, CHKW_F          ; check for win
        ld r21, 16(r31)         ; ball x
        addi r31, r31, -4
        st r21, (r31)
        brl r30, r20            ; call check_win(ball x)
        addi r31, r31, 4        ; restore main stack frame
        
        la r20, MP_F            ; move paddle 1
        ld r21, 32(r31)         ; p1y
        ld r22, 40(r31)         ; len
        la r23, 2               ; off up
        la r24, 3               ; off dn
        addi r31, r31, -16
        st r24, 12(r31)
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call move_paddle(y, len, up, dn)
        addi r31, r31, 16       ; restore main stack frame
        st r19, 32(r31)         ; write the new y back
        
        la r20, MP_F            ; move paddle 2
        ld r21, 24(r31)         ; p2y
        ld r22, 40(r31)         ; len
        la r23, 4               ; off up
        la r24, 5               ; off dn
        addi r31, r31, -16
        st r24, 12(r31)
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call move_paddle(y, len, up, dn)
        addi r31, r31, 16       ; restore main stack frame
        st r19, 24(r31)         ; write the new y back
        
        la r20, DRWP_F          ; draw paddle 1
        ld r21, 40(r31)         ; push p1len
        ld r22, 32(r31)         ; push p1y
        ld r23, 36(r31)         ; push p1x
        addi r31, r31, -12
        st r21, 8(r31)
        st r22, 4(r31)
        st r23, (r31)
        brl r30, r20            ; call draw_paddle(x, y, len) for paddle 1
        addi r31, r31, 12       ; restore main stack frame
        
        la r20, DRWP_F          ; draw paddle 2
        ld r21, 40(r31)         ; push p2len
        ld r22, 24(r31)         ; push p2y
        ld r23, 28(r31)         ; push p2x
        addi r31, r31, -12
        st r21, 8(r31)
        st r22, 4(r31)
        st r23, (r31)
        brl r30, r20            ; call draw_paddle(x, y, len) for paddle 1
        addi r31, r31, 12       ; restore main stack frame
        
        la r20, MB_F            ; move ball
        la r21, 16(r31)         ; *ball x
        la r22, 12(r31)         ; *ball y
        ld r23, 8(r31)          ; ball vel x
        ld r24, 4(r31)          ; ball vel y
        addi r31, r31, -16
        st r24, 12(r31)
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call move_ball(*x, *y, velx, vely)
        addi r31, r31, 16       ; restore main stack frame
        
        la r20, CBY_F
        ld r21, 12(r31)         ; y
        la r22, 4(r31)          ; *vely
        addi r31, r31, -8
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call collide_ball_y(y, *vely)
        addi r31, r31, 8        ; restore main stack frame
        
        la r20, CBP_F           ; collision with p1
        ld r21, 36(r31)
        addi r21, r21, 1        ; x to check
        ld r22, 32(r31)         ; p1 y
        ld r23, 40(r31)         ; p1 len
        ld r24, 16(r31)         ; ball x
        ld r25, 12(r31)         ; ball y
        la r26, 8(r31)          ; *velx
        addi r31, r31, -24
        st r26, 20(r31)
        st r25, 16(r31)
        st r24, 12(r31)
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call collide_ball_p(x, p1y, p1len, ball x, ball y, *velx)
        addi r31, r31, 24
        
        la r20, CBP_F           ; collision with p2
        ld r21, 28(r31)
        addi r21, r21, -1       ; x to check
        ld r22, 24(r31)         ; p2 y
        ld r23, 40(r31)         ; p2 len
        ld r24, 16(r31)         ; ball x
        ld r25, 12(r31)         ; ball y
        la r26, 8(r31)          ; *velx
        addi r31, r31, -24
        st r26, 20(r31)
        st r25, 16(r31)
        st r24, 12(r31)
        st r23, 8(r31)
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call collide_ball_p(x, p2y, p2len, ball x, ball y, *velx)
        addi r31, r31, 24
        
        la r20, DRWB_F          ; draw ball
        ld r21, 16(r31)         ; ball x
        ld r22, 12(r31)         ; ball y
        addi r31, r31, -8
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r20            ; call draw_ball(x, y)
        addi r31, r31, 8        ; restore main stack frame
        
        la r20, DLY_F
        ld r21, (r31)           ; get frame delay
        addi r31, r31, -4
        st r21, (r31)
        brl r30, r20            ; call delay(frame_delay)
        addi r31, r31, 4        ; restore main stack frame
        la r21, MAIN_L
        br r21
      
; func move_ball(*x, *y, velx, vely)
MB_F:   ld r1, (r31)            ; *x
        ld r2, 4(r31)           ; *y
        ld r3, 8(r31)           ; velx
        ld r4, 12(r31)          ; vely
        
        ld r5, (r1)             ; x
        ld r6, (r2)             ; y
        add r5, r5, r3          ; new x
        add r6, r6, r4          ; new y
        
        st r5, (r1)             ; write x back
        st r6, (r2)             ; write y back
        br r30                  ; ret

; func move_paddle(y, len, off_up, off_dn)
MP_F:   addi r31, r31, -20       ; push callee save registers and return addr
        st r21, 16(r31)
        st r22, 12(r31)
        st r23, 8(r31)
        st r24, 4(r31)
        st r30, (r31)
        
        ld r21, 20(r31)         ; y
        ld r22, 24(r31)         ; len
        ld r23, 28(r31)         ; off_up
        ld r24, 32(r31)         ; off_dn
        
        la r5, CHK_B_F
        addi r31, r31, -4
        st r23, (r31)
        brl r30, r5             ; call check_button(off_up)
        addi r31, r31, 4        ; restore move_paddle's stack frame
        addi r23, r19, 0        ; put state of up button in r23
        
        la r5, CHK_B_F
        addi r31, r31, -4
        st r24, (r31)
        brl r30, r5             ; call check_button(off_up)
        addi r31, r31, 4        ; restore move_paddle's stack frame
        addi r24, r19, 0        ; put state of dn button in r4
        
        la r5, MP_1
        brnz r5, r23
        addi r21, r21, -1       ; move up
MP_1:   la r5, MP_2
        brnz r5, r24
        addi r21, r21, 1        ; move down
MP_2:   la r5, CPP_F            ; check paddle position
        addi r31, r31, -8
        st r22, 4(r31)
        st r21, (r31)
        brl r30, r5             ; call check_paddle_position(y, len)
        addi r31, r31, 8        ; restore move_paddle's stack frame
                                ; r19 already has corrected y
        
        ld r21, 16(r31)         ; restore callee save registers and ret addr
        ld r22, 12(r31)
        ld r23, 8(r31)
        ld r24, 4(r31)
        ld r30, (r31)
        addi r31, r31, 20
        
        br r30                  ; ret
        
; func check_paddle_position(y, len) -- return corrected y
CPP_F:  ld r1, (r31)            ; y
        ld r2, 4(r31)           ; len
        la r19, 0               ; default to top of screen
        brmi r30, r1            ; above top of screen
        add r4, r1, r2          ; get bottom of paddle
        addi r4, r4, -1
        addi r4, r4, -30
        la r19, 29
        neg r2, r2              ; flip r2
        add r19, r19, r2        ; get top of paddle
        addi r19, r19, 1
        brpl r30, r4
        addi r19, r1, 0         ; output same y we got
        br r30                  ; ret
        
; func check_button(off)
CHK_B_F:ld r1, (r31)            ; off
        la r2, 4294967274       ; base of io
        add r1, r1, r2          ; get actual addr
        ld r19, (r1)            ; read state
        br r30                  ; ret
        
        
; func collide_ball_y(y, *vely)
CBY_F:  ld r1, (r31)            ; y
        ld r2, 4(r31)           ; *vely
        addi r3, r1, -29        ; is y 29?
        ld r4, (r2)             ; vely
        neg r4, r4              ; flip vely
        st r4, (r2)             ; store new vely
        brzr r30, r1            ; if y 0, flip
        brzr r30, r3            ; if y 29, flip
        neg r4, r4              ; flip back
        st r4, (r2)             ; store original vely
        br r30                  ; ret
        
; func collide_ball_p(check x, paddle y, paddle len, ball x, ball y, *velx)
CBP_F:  ld r1, (r31)            ; check x
        ld r2, 4(r31)           ; paddle y
        ld r3, 8(r31)           ; paddle len
        ld r4, 12(r31)          ; ball x
        ld r5, 16(r31)          ; ball y
        ld r6, 20(r31)          ; *velx
        ld r7, (r6)
        sub r8, r1, r4          ; in the collide col?
        brnz r30, r8            ; ret
        add r8, r2, r3
        addi r8, r8, -1         ; bottom of paddle
        sub r9, r5, r2          ; above top?
        brmi r30, r9            ; ret
        sub r9, r8, r5          ; below bottom?
        brmi r30, r9            ; ret
        neg r7, r7              ; flip velx
        st r7, (r6)             ; write back
        br r30                  ; ret
        
; func draw_ball(x, y)
DRWB_F: ld r1, (r31)            ; x
        ld r2, 4(r31)           ; y
        la r3, 79               ; char O
        la r4, 16384            ; beg of framestore
        shl r1, r1, 2           ; *4
        shl r2, r2, 9           ; 128*4
        add r4, r4, r1
        add r4, r4, r2          ; addr to draw
        st r3, (r4)             ; write O to screen
        br r30                  ; ret

; func draw_paddle (x, y, len)  
DRWP_F: ld r1, (r31)            ; x
        shl r1, r1, 2           ; *4 to get addr
        ld r2, 4(r31)           ; y
        ld r3, 8(r31)           ; len
        la r7, 16384            ; beg of framestore
        la r8, 32767            ; end of framestore
        la r9, 35               ; pipe character
        la r10, DRWP_1          ; store loop ptr
        shl r4, r2, 9           ; mul y by 128 * 4 to get addr
        addi r5, r7, 0          ; framestore base addr
        add r5, r5, r4          ; get address of what we want to draw
        add r5, r5, r1
        addi r3, r3, -1
DRWP_1: addi r3, r3, -1         ; dec len
        sub r6, r8, r5          ; are we within framestore
        brmi r30, r6            ; ret if out of bounds
        sub r6, r5, r7
        brmi r30, r6
        st r9, (r5)             ; write a | to the framestore
        addi r5, r5, 512        ; go to next line
        brpl r10, r3            ; go to draw next char
        br r30                  ; ret
        
; func delay(loops)
DLY_F:  ld r1, (r31)            ; clock ticks to wait
        la r2, DLY_1
DLY_1:  addi r1, r1, -1         ; dec counter
        brpl r2, r1
        br r30
        
; func check_win(ball x);
CHKW_F: ld r1, (r31)            ; ball x
        addi r2, r1, -1         ; p2 wins
        addi r3, r1, -79        ; p1 wins
        la r4, CHKW_1           ; p1 won
        la r5, CHKW_2           ; p2 won
        brpl r4, r3
        brmi r5, r2
        br r30                  ; ret
CHKW_1: la r6, 1                ; p1 label
        la r7, CHKW_3
        br r7
CHKW_2: la r6, 2                ; p2 label
CHKW_3: addi r7, r6, 48         ; convert to ascii
        la r6, CLRA_F           ; clear the screen
        brl r30, r6
        la r6, 16384            ; beg of framestore
        la r8, 80               ; 'P'
        st r8, (r6)
        st r7, 4(r6)            ; player num
        la r8, 87               ; 'W'
        st r8, 12(r6)
        la r8, 73               ; 'I'
        st r8, 16(r6)
        la r8, 78               ; 'N'
        st r8, 20(r6)
        la r8, 83               ; 'S'
        st r8, 24(r6)
        la r8, 33               ; '!'
        st r8, 28(r6)
        br r0                   ; return to monitor program
        
; func clear(p1x, p2x, p3x)
CLR_F:  la r1, 16384            ; beg of framestore
        ld r2, (r31)            ; p1x
        shl r2, r2, 2
        ld r3, 4(r31)           ; p2x
        shl r3, r3, 2
        ld r4, 8(r31)           ; p3x
        shl r4, r4, 2
        la r5, 32               ; space char
        la r6, CLR_1            ; loop pointer
        la r7, 30
        add r8, r1, r2
CLR_1:  st r5, (r8)
        addi r8, r8, 512        ; go to next line
        addi r7, r7, -1
        brpl r6, r7
        la r6, CLR_2
        la r7, 30
        add r8, r1, r3
CLR_2:  st r5, (r8)
        addi r8, r8, 512        ; go to next line
        addi r7, r7, -1
        brpl r6, r7
        la r6, CLR_3
        la r7, 30
        add r8, r1, r4
CLR_3:  st r5, (r8)
        addi r8, r8, 512        ; go to next line
        addi r7, r7, -1
        brpl r6, r7
        br r30                  ; ret
        
; clear_all()
CLRA_F: la r1, 16384            ; beg of framestore
        la r2, 4095             ; clear 4096 values
        la r3, 32               ; store spaces
        la r4, CLRA_1           ; loop addr
CLRA_1: st r3, (r1)             ; write space
        addi r1, r1, 4          ; next char
        addi r2, r2, -1         ; dec counter
        brpl r4, r2             ; loop
        br r30                  ; ret
